name: Run Test on Commit
description: |
  If a commit has not already been tested, run the provided command and set the
  commit status on the source repository.  Once this has been performed, the
  commit status will be used as a cache and the test command will not be run
  again.
inputs:
  sha:
    description: Commit SHA to test
    required: true
  context:
    description: GitHub status context
    required: true
  command:
    description: Shell command to run as the test
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout ${{ inputs.sha }}
      shell: bash
      run: |
        echo "Checking out ${{ inputs.sha }} and setting up environment"

        git checkout --force --detach ${{ inputs.sha }}
        full_sha=$(git rev-parse ${{ inputs.sha }})
        status_file=test-commit-${{ inputs.sha }}-$(echo ${{ inputs.context }} | tr '[ /]' '-').status

        cat <<-EOF >> "${GITHUB_ENV}"
        GH_TOKEN=${{ github.token }}
        TARGET_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        STATUS_URL=repos/${{ github.repository }}/commits/${full_sha}/status
        STATUS_FILE=${status_file}
        FULL_SHA=${full_sha}
        EOF
    - name: Check if already tested
      id: check
      shell: bash
      run: |
        echo "Checking for cached status of ${{ inputs.context }}"
        set -euo pipefail

        state=
        state=$(gh api --jq '.statuses[] | select(.context=="${{ inputs.context }}") | .state' ${STATUS_URL} | head -n1)

        if [[ ${state} =~ (success|failure) ]]; then
          echo "Already tested: ${state}"
          echo "skip=true" >> "${GITHUB_OUTPUT}"
          [[ ${state:-} == "success" ]]
          exit $?
        else
          echo "skip=false" >> "${GITHUB_OUTPUT}"
        fi
    - name: Run test command
      id: test
      if: steps.check.outputs.skip == 'false'
      shell: bash
      run: |
        echo "Running: ${{ inputs.command }}"
        set +e
        ${{ inputs.command }}
        exit_code=$?

        state=failure
        if [[ ${exit_code} -eq 0 ]]; then
          state=success
        fi

        cat <<-EOF > "${STATUS_FILE}"
        {
          "state": "${state}",
          "sha": "${FULL_SHA}",
          "context": "${{ inputs.context }}",
          "target_url": "${TARGET_URL}"
        }
        EOF
        exit ${exit_code}

    - name: Archive test status
      if: always() && steps.check.outputs.skip == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.STATUS_FILE }}
        path: ${{ env.STATUS_FILE }}
        if-no-files-found: error
        retention-days: 1
        overwrite: true
